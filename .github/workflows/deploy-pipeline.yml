name: deploy_workflow

on:
  workflow_run:
    workflows: package_workflow
    types: completed
  workflow_dispatch:
    inputs:
      k8sProvider:
        description: 'Deploy Cluster Name.'
        required: true
        type: string  
        default: 'nothing'
      secretsName:
        description: 'ImagePullSecret Name.'
        type: string
        default: ''

env:
  k8sProvider: ${{ github.event.inputs.k8sProvider || 'nothing' }}
  deploymentYamlPath: "${{ github.workspace }}/kubernetes/application-deployment.yaml" 
  ingressYamlPath: "${{ github.workspace }}/kubernetes/ingress.yaml"  
  deployFilesPath: "${{ github.workspace }}/kubernetes"
  provisionPipeline: "aks-provisioning.yml"
  packagePipelineName: "package_workflow.yml"
  packageTagScript: ".github/workflows/scripts/package-extra.sh"
  k8sNamespace: "testgithubhangarns"
  packagePipelineYamlName: "package-pipeline.yml"

jobs:
  test_secret_condition:
    runs-on: ubuntu-latest
    if: ${{ secrets.test_condition == "oui" }}
    steps:
      - name: test
        run: echo test; echo "${{ github.event.workflow_run.head_branch }}"; echo ok; echo ${{ github.ref }}; echo ok; echo ${{ github }}
        
      - name: echo context
        run: echo "$JOB_CONTEXT"
        env:
          JOB_CONTEXT: ${{ toJson(github) }}
  
  Deploy_to_AKS:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
    
      - name: get info from package
        uses: dawidd6/action-download-artifact@v2
        id: downloadFromBuild
        if: ${{ github.event_name == 'workflow_run' && env.k8sProvider == 'AKS' }}
        with:
          workflow: ${{ env.packagePipelineYamlName }}
          run_number: ${{ github.event.workflow_run.run_number }}
          check_artifacts:  true
          name: package_workflow_info
  
      - name: Get env var from the package-pipeline
        uses: tw3lveparsecs/github-actions-setvars@v0.1
        if: ${{ github.event_name == 'workflow_run' && env.k8sProvider == 'AKS' }}
        with:
          envFilePath: package_workflow_info.env
          
      - name: Checkout the repository
        uses: actions/checkout@master
        if: ${{ env.k8sProvider == 'AKS' }}
        with:
          ref: ${{ env.commit_package_workflow || github.sha }}
        
      - name: Download artifact from AKS provision pipeline workflow
        uses: dawidd6/action-download-artifact@v2
        if: ${{ env.k8sProvider == 'AKS' }}
        with:
          workflow: ${{ env.provisionPipeline }}
          check_artifacts:  true
          search_artifacts: true
          name: kubeconfig 
          
      - name: Set EKS Environment Variables
        uses: tw3lveparsecs/github-actions-setvars@v0.1
        if: ${{ env.k8sProvider == 'AKS' }}
        with:
          envFilePath: ".github/vars/*"
          
      - name: Create secrets for AKS
        if: ${{ github.event.inputs.k8sProvider == 'AKS' && github.event.inputs.secretsName != '' && env.k8sProvider == 'AKS'}}
        env:
          KUBECONFIG: "${{ github.workspace }}/kubeconfig"
        run: .github/workflows/scripts/secrets.sh "${{ env.k8sNamespace }}" "${{ github.event.inputs.secretsName }}" "${{ secrets.DOCKER_USER }}" "${{ secrets.DOCKER_PASSWORD }}" "${{ env.registry }}" "${{ env.deploymentYamlPath }}"          
      
      - name: Deploy app to AKS  
        if: ${{ env.k8sProvider == 'AKS' }}
        env:
          KUBECONFIG: "${{ github.workspace }}/kubeconfig"
        run: cat ${{ env.deploymentYamlPath }};.github/workflows/scripts/deploy.sh "${{ env.k8sNamespace }}" "${{ env.imageName }}" "${{ env.aks_dns_name }}" "${{ env.deploymentYamlPath }}" "${{ env.ingressYamlPath }}" "${{ env.deployFilesPath }}" "${{ env.packageTagScript }}" "${{ env.branch_package_workflow || github.ref }}"
          
      
  Deploy_to_EKS:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.k8sProvider == 'EKS' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch') }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3 
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}
          
      - name: Set EKS Environment Variables
        uses: tw3lveparsecs/github-actions-setvars@v0.1
        with:
          envFilePath: ".github/vars/*"
          
      - name: Create secrets for EKS
        if: ${{ github.event.inputs.k8sProvider == 'EKS' && github.event.inputs.secretsName != '' }}
        run: |
          aws eks update-kubeconfig --name ${{ env.cluster_name }} --region ${{ env.aws_region }}
          .github/workflows/scripts/secrets.sh "${{ env.k8sNamespace }}" "${{ github.event.inputs.secretsName }}" "${{ secrets.AWS_ACCESS_KEY_ID }}" "${{ secrets.AWS_SECRET_ACCESS_KEY }}" "${{ env.registry }}" "${{ env.deploymentYamlPath }}"
      
      - name: Deploy app to EKS 
        run: |
          aws eks update-kubeconfig --name ${{ env.cluster_name }} --region ${{ env.aws_region }}
          .github/workflows/scripts/deploy.sh "${{ env.k8sNamespace }}" "${{ env.imageName }}" "${{ env.eks_dns_name }}" "${{ env.deploymentYamlPath }}" "${{ env.ingressYamlPath }}" "${{ env.deployFilesPath }}" "${{ env.packageTagScript }}" "${{ github.event.workflow_run.head_branch || github.ref }}"

  # mark to insert step for additional artifact #
  on-failure:
    name: CI Workflow Failed
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Cancel Workflow
        uses: andymckay/cancel-action@0.2             
